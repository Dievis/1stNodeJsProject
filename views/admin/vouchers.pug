extends ../admin/layout

block content
  .container.mt-5
    h1.text-center.mb-4 Quản lý Voucher

    .d-flex.justify-content-between.mb-3
      button.btn.btn-primary(data-bs-toggle="modal", data-bs-target="#addVoucherModal")
        i.fas.fa-plus-circle.me-2
        | Thêm Voucher

    if vouchers && vouchers.length > 0
      .table-responsive
        table.table.table-striped.table-hover
          thead
            tr
              th Tên Voucher
              th Mã
              th Giảm giá (%)
              th Giảm tối đa
              th Ngày hết hạn
              th Trạng thái
              th Hành động
          tbody
            each voucher in vouchers
              tr(data-id=voucher._id)
                td= voucher.name
                td= voucher.code
                td= voucher.discountPercentage
                td= voucher.maximumDiscount
                td= voucher.expirationDate.toLocaleDateString()
                td= voucher.isActive ? 'Hoạt động' : 'Không hoạt động'
                td
                  button.btn.btn-sm.btn-warning.me-2.edit-voucher-btn(data-bs-toggle="modal", data-bs-target="#editVoucherModal", data-id=voucher._id) Sửa
                  button.btn.btn-sm.btn-danger.delete-voucher-btn(data-id=voucher._id) Xóa
    else
      p.text-center.text-muted Không có voucher nào.

  .modal#addVoucherModal(tabindex="-1" role="dialog")
    .modal-dialog.modal-dialog-centered(role="document")
      .modal-content
        .modal-header
          h5.modal-title Thêm Voucher
          button.close(type="button", data-bs-dismiss="modal", aria-label="Close")
            span(aria-hidden="true") &times;
        .modal-body
          form#addVoucherForm
            .form-group
              label(for="name") Tên Voucher
              input.form-control(type="text", name="name", required)
            .form-group
              label(for="code") Mã Voucher
              input.form-control(type="text", name="code", required)
            .form-group
              label(for="discountPercentage") Giảm giá (%)
              input.form-control(type="number", name="discountPercentage", min="0", max="100", required)
            .form-group
              label(for="maximumDiscount") Giảm tối đa
              input.form-control(type="number", name="maximumDiscount", min="0", required)
            .form-group
              label(for="expirationDate") Ngày hết hạn
              input.form-control(type="date", name="expirationDate", required)
            .modal-footer
              button.btn.btn-secondary(type="button", data-bs-dismiss="modal") Đóng
              button.btn.btn-primary(type="submit") Thêm Voucher

  .modal#editVoucherModal(tabindex="-1" role="dialog")
    .modal-dialog.modal-dialog-centered(role="document")
      .modal-content
        .modal-header
          h5.modal-title Sửa Voucher
          button.close(type="button", data-bs-dismiss="modal", aria-label="Close")
            span(aria-hidden="true") &times;
        .modal-body
          form#editVoucherForm
            input(type="hidden", name="id")
            .form-group
              label(for="name") Tên Voucher
              input.form-control(type="text", name="name", required)
            .form-group
              label(for="code") Mã Voucher
              input.form-control(type="text", name="code", required)
            .form-group
              label(for="discountPercentage") Giảm giá (%)
              input.form-control(type="number", name="discountPercentage", min="0", max="100", required)
            .form-group
              label(for="maximumDiscount") Giảm tối đa
              input.form-control(type="number", name="maximumDiscount", min="0", required)
            .form-group
              label(for="expirationDate") Ngày hết hạn
              input.form-control(type="date", name="expirationDate", required)
            .form-group
              label(for="isActive") Trạng thái
              select.form-control(name="isActive", required)
                option(value="true") Hoạt động
                option(value="false") Không hoạt động
            .modal-footer
              button.btn.btn-secondary(type="button", data-bs-dismiss="modal") Đóng
              button.btn.btn-primary(type="submit") Lưu thay đổi

block scripts
  script.
    document.addEventListener('DOMContentLoaded', () => {
      const addVoucherForm = document.querySelector('#addVoucherForm');
      if (addVoucherForm) {
        addVoucherForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const formData = new FormData(addVoucherForm);
          const body = Object.fromEntries(formData.entries());

          try {
            const response = await fetch('/vouchers', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(body),
            });

            const result = await response.json();
            if (response.ok) {
              alert(result.message || 'Thêm voucher thành công');
              location.reload();
            } else {
              alert(result.message || 'Có lỗi xảy ra khi thêm voucher');
            }
          } catch (err) {
            console.error(err);
            alert('Lỗi kết nối server');
          }
        });
      }

      const editVoucherButtons = document.querySelectorAll('.edit-voucher-btn');
      const editForm = document.querySelector('#editVoucherForm');
      editVoucherButtons.forEach(button => {
        button.addEventListener('click', async () => {
          const id = button.dataset.id;
          try {
            const response = await fetch(`/vouchers/${id}`);
            const voucher = await response.json();
            if (response.ok) {
              editForm.id.value = voucher._id;
              editForm.name.value = voucher.name;
              editForm.code.value = voucher.code;
              editForm.discountPercentage.value = voucher.discountPercentage;
              editForm.maximumDiscount.value = voucher.maximumDiscount;
              editForm.expirationDate.value = new Date(voucher.expirationDate).toISOString().split('T')[0];
              editForm.isActive.value = String(voucher.isActive);
            } else {
              alert('Không thể tải dữ liệu voucher');
            }
          } catch (err) {
            console.error(err);
            alert('Lỗi khi tải dữ liệu voucher');
          }
        });
      });

      if (editForm) {
        editForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const formData = new FormData(editForm);
          const body = Object.fromEntries(formData.entries());
          try {
            const response = await fetch(`/vouchers/${body.id}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(body),
            });
            const result = await response.json();
            if (response.ok) {
              alert(result.message || 'Cập nhật voucher thành công');
              location.reload();
            } else {
              alert(result.message || 'Có lỗi xảy ra khi cập nhật');
            }
          } catch (err) {
            console.error(err);
            alert('Lỗi kết nối server');
          }
        });
      }

      const deleteButtons = document.querySelectorAll('.delete-voucher-btn');
      deleteButtons.forEach(button => {
        button.addEventListener('click', async () => {
          const id = button.dataset.id;
          if (confirm('Bạn có chắc muốn xóa voucher này?')) {
            try {
              const response = await fetch(`/vouchers/${id}`, {
                method: 'DELETE',
              });
              const result = await response.json();
              if (response.ok) {
                alert('Đã xóa thành công');
                location.reload();
              } else {
                alert(result.message || 'Không thể xóa voucher');
              }
            } catch (err) {
              console.error(err);
              alert('Lỗi kết nối server');
            }
          }
        });
      });
    });

