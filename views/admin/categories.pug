extends ../admin/layout

block content
  .container.bg-white.shadow-sm.rounded.p-4.mt-4
    h1.text-center.mb-4.text-primary.fw-bold Quản lý danh mục

    .d-flex.justify-content-between.align-items-center.mb-4
      a.btn.btn-success.shadow-sm(href='#', data-bs-toggle="modal", data-bs-target="#addCategoryModal")
        i.fas.fa-plus-circle.me-2
        | Thêm danh mục mới

    if categories && categories.length > 0
      .table-responsive.shadow-sm.rounded
        table.table.table-bordered.table-hover.align-middle
          thead.table-dark
            tr
              th.text-center Tên danh mục
              th.text-center Mô tả
              th.text-center Hành động
          tbody
            each category in categories
              tr(data-id=category._id)
                td.text-center= category.name
                td.text-center= category.description || 'Không có mô tả'
                td.text-center
                  a.btn.btn-warning.btn-sm.me-1.shadow.edit-category(href='#', data-bs-toggle="modal", data-bs-target="#editCategoryModal")
                    i.fas.fa-edit.me-1
                    | Sửa
                  button.btn.btn-danger.btn-sm.shadow.delete-category
                    i.fas.fa-trash.me-1
                    | Xóa
    else
      p.text-center.text-muted Không có danh mục nào.

  // Modal for adding category
  .modal.fade#addCategoryModal(tabindex="-1" role="dialog")
    .modal-dialog.modal-dialog-centered(role="document")
      .modal-content
        .modal-header
          h5.modal-title.text-white Thêm danh mục mới
          button.btn-close(type="button", data-bs-dismiss="modal", aria-label="Close")
        .modal-body.bg-light
          form#addCategoryForm
            .mb-3
              label.form-label(for="name") Tên danh mục
              input.form-control.shadow-sm(type="text", id="name", required)
            .mb-3
              label.form-label(for="description") Mô tả
              textarea.form-control.shadow-sm(id="description", rows="4")
        .modal-footer.justify-content-between
          button.btn.btn-secondary(type="button", data-bs-dismiss="modal") Đóng
          button.btn.btn-success(type="submit") Thêm mới

  // Modal for editing category
  .modal.fade#editCategoryModal(tabindex="-1" role="dialog")
    .modal-dialog.modal-dialog-centered(role="document")
      .modal-content
        .modal-header
          h5.modal-title.text-white Sửa danh mục
          button.btn-close(type="button", data-bs-dismiss="modal", aria-label="Close")
        .modal-body.bg-light
          form#editCategoryForm
            input(type="hidden", name="id")
            .mb-3
              label.form-label(for="name") Tên danh mục
              input.form-control.shadow-sm(type="text", name="name", required)
            .mb-3
              label.form-label(for="description") Mô tả
              textarea.form-control.shadow-sm(name="description", rows="4", placeholder="Nhập mô tả danh mục")
        .modal-footer.justify-content-between
          button.btn.btn-secondary(type="button", data-bs-dismiss="modal") Đóng
          button.btn.btn-primary(type="submit") Lưu thay đổi

block styles
  style.
    body {
      background-color: #f8f9fa;
    }

    .modal-header {
      background-color: #0d6efd;
    }

    .btn-success, .btn-warning, .btn-danger {
      transition: all 0.3s ease;
    }

    .btn-success:hover {
      background-color: #198754cc;
    }

    .btn-warning:hover {
      background-color: #ffc107cc;
    }

    .btn-danger:hover {
      background-color: #dc3545cc;
    }

block scripts
  script.
    document.addEventListener('DOMContentLoaded', () => {
      // Xóa danh mục
      document.querySelectorAll('.delete-category').forEach(button => {
        button.addEventListener('click', async (e) => {
          const row = e.target.closest('tr');
          const categoryId = row.getAttribute('data-id');
          if (confirm('Bạn có chắc chắn muốn xóa danh mục này?')) {
            try {
              const response = await fetch(`/categories/${categoryId}`, {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json'
                }
              });
              const result = await response.json();
              if (result.success) {
                alert('Xóa danh mục thành công!');
                row.remove();
              } else {
                alert('Xóa danh mục thất bại: ' + result.message);
              }
            } catch (error) {
              console.error('Error deleting category:', error);
              alert('Đã xảy ra lỗi khi xóa danh mục.');
            }
          }
        });
      });

      // Sửa danh mục
      document.querySelectorAll('.edit-category').forEach(button => {
        button.addEventListener('click', (e) => {
          const row = e.target.closest('tr');
          const categoryId = row.getAttribute('data-id');
          const name = row.children[0].innerText;
          const description = row.children[1].innerText;

          const form = document.querySelector('#editCategoryForm');
          form.id.value = categoryId;
          form.name.value = name;
          form.description.value = description;

          $('#editCategoryModal').modal('show');
        });
      });

      // Cập nhật danh mục
      document.querySelector('#editCategoryForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target;
        const categoryId = form.id.value;
        const body = {
          name: form.name.value,
          description: form.description.value
        };

        try {
          const response = await fetch(`/categories/${categoryId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
          });
          const result = await response.json();
          if (result.success) {
            alert('Cập nhật danh mục thành công!');
            location.reload();
          } else {
            alert('Cập nhật danh mục thất bại: ' + result.message);
          }
        } catch (error) {
          console.error('Error updating category:', error);
          alert('Đã xảy ra lỗi khi cập nhật danh mục.');
        }
      });

      // Thêm danh mục
      document.querySelector('#addCategoryForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target;
        const body = {
          name: form.name.value,
          description: form.description.value
        };

        try {
          const response = await fetch('/categories', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
          });
          const result = await response.json();
          if (result.success) {
            alert('Thêm danh mục thành công!');
            location.reload();
          } else {
            alert('Thêm danh mục thất bại: ' + result.message);
          }
        } catch (error) {
          console.error('Error adding category:', error);
          alert('Đã xảy ra lỗi khi thêm danh mục.');
        }
      });
    });
