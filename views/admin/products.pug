extends ../admin/layout

block content
  .container
    h1.text-center.mb-4 Quản lý sản phẩm
    .d-flex.justify-content-between.mb-3
      a.btn.btn-primary(href='#', data-bs-toggle="modal", data-bs-target="#addProductModal")
        i.fas.fa-plus-circle.me-2
        | Thêm sản phẩm mới

    if products && products.length > 0
      .table-responsive
        table.table.table-striped.table-hover
          thead
            tr
              th Ảnh sản phẩm 
              th Tên sản phẩm
              th Giá
              th Số lượng
              th Giảm giá (%)
              th Danh mục
              th Hành động
          tbody
            each product in products
              tr(data-id=product._id)
                td
                  if product.imgURL
                    img(src=product.imgURL, alt=product.name, width="50", height="50")
                  else
                    span.text-muted Không có ảnh
                td= product.name
                td $#{product.price}
                td= product.quantity
                td= product.discount
                td(data-id=product.category ? product.category._id : '')= product.category ? product.category.name : 'Không có danh mục'
                td
                  a.btn.btn-sm.btn-warning.me-2.edit-product(href='#', data-bs-toggle="modal", data-bs-target="#editProductModal")
                    i.fas.fa-edit.me-1
                    | Sửa
                  button.btn.btn-sm.btn-danger.delete-product
                    i.fas.fa-trash.me-1
                    | Xóa
    else
      p.text-center.text-muted Không có sản phẩm nào.

  .modal#addProductModal(tabindex="-1" role="dialog")
    .modal-dialog.modal-dialog-centered(role="document")
      .modal-content
        .modal-header
          h5.modal-title Thêm sản phẩm mới
          button.close(type="button", data-bs-dismiss="modal", aria-label="Close")
            span(aria-hidden="true") &times;
        .modal-body
          form#addProductForm(enctype="multipart/form-data") 
            .form-group
              label(for="name") Tên sản phẩm
              input.form-control(type="text", name="name", required)
            .form-group
              label(for="price") Giá
              input.form-control(type="number", name="price", required)
            .form-group
              label(for="quantity") Số lượng
              input.form-control(type="number", name="quantity", required)
            .form-group
              label(for="discount") Giảm giá (%)
              input.form-control(type="number", name="discount", min="0", max="100", value="0")
            .form-group
              label(for="category") Danh mục
              select.form-control(name="category", required)
                option(value="" disabled selected) -- Chọn danh mục --
                each category in categories
                  option(value=category._id)= category.name
            .form-group
              label(for="image") Ảnh sản phẩm
              input.form-control(type="file", name="image") 
            .modal-footer
              button.btn.btn-secondary(type="button", data-bs-dismiss="modal") Đóng
              button.btn.btn-primary(type="submit") Thêm sản phẩm

  .modal#editProductModal(tabindex="-1" role="dialog")
    .modal-dialog.modal-dialog-centered(role="document")
      .modal-content
        .modal-header
          h5.modal-title Sửa sản phẩm
          button.close(type="button", data-bs-dismiss="modal", aria-label="Close")
            span(aria-hidden="true") &times;
        .modal-body
          form#editProductForm(enctype="multipart/form-data")
            input(type="hidden", name="id")
            .form-group
              label(for="name") Tên sản phẩm
              input.form-control(type="text", name="name", required)
            .form-group
              label(for="price") Giá
              input.form-control(type="number", name="price", required)
            .form-group
              label(for="quantity") Số lượng
              input.form-control(type="number", name="quantity", required)
            .form-group
              label(for="discount") Giảm giá (%)
              input.form-control(type="number", name="discount", min="0", max="100")
            .form-group
              label(for="category") Danh mục
              select.form-control(name="category", required)
                option(value="" disabled selected) -- Chọn danh mục --
                each category in categories
                  option(value=category._id)= category.name
            .form-group
              label(for="image") Ảnh sản phẩm
              input.form-control(type="file", name="image")
            .modal-footer
              button.btn.btn-secondary(type="button", data-bs-dismiss="modal") Đóng
              button.btn.btn-primary(type="submit") Lưu thay đổi

block scripts
  script.
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.delete-product').forEach(button => {
        button.addEventListener('click', async (e) => {
          const row = e.target.closest('tr');
          const productId = row.getAttribute('data-id');
          if (confirm('Bạn có chắc chắn muốn xóa sản phẩm này?')) {
            try {
              const response = await fetch(`/products/${productId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
              });
              const result = await response.json();
              if (result.success) {
                alert('Xóa sản phẩm thành công!');
                row.remove();
              } else {
                alert('Xóa sản phẩm thất bại: ' + result.message);
              }
            } catch (error) {
              console.error('Error deleting product:', error);
              alert('Đã xảy ra lỗi khi xóa sản phẩm.');
            }
          }
        });
      });

      document.querySelectorAll('.edit-product').forEach(button => {
        button.addEventListener('click', (e) => {
          const row = e.target.closest('tr');
          const productId = row.getAttribute('data-id');
          const name = row.children[1].innerText;
          const price = row.children[2].innerText.replace('$', '');
          const quantity = row.children[3].innerText;
          const discount = row.children[4].innerText;
          const categoryId = row.children[5].getAttribute('data-id');

          const form = document.querySelector('#editProductForm');
          form.id.value = productId;
          form.name.value = name;
          form.price.value = price;
          form.quantity.value = quantity;
          form.discount.value = discount;
          form.category.value = categoryId;

          $('#editProductModal').modal('show');
        });
      });

      document.querySelector('#addProductForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form); 

        try {
          const response = await fetch('/products', {
            method: 'POST',
            body: formData  
          });
          const result = await response.json();
          if (result.success) {
            alert('Thêm sản phẩm thành công!');
            location.reload();
          } else {
            alert('Thêm sản phẩm thất bại: ' + result.message);
          }
        } catch (error) {
          console.error('Error adding product:', error);
          alert('Đã xảy ra lỗi khi thêm sản phẩm.');
        }
      });

      document.querySelector('#editProductForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const productId = formData.get('id');

        try {
          const response = await fetch(`/products/${productId}`, {
            method: 'PUT',
            body: formData  
          });
          const result = await response.json();
          if (result.success) {
            alert('Cập nhật sản phẩm thành công!');
            location.reload();
          } else {
            alert('Cập nhật sản phẩm thất bại: ' + result.message);
          }
        } catch (error) {
          console.error('Error updating product:', error);
          alert('Đã xảy ra lỗi khi cập nhật sản phẩm.');
        }
      });
    });
